{"version":3,"sources":["containers/App.module.css","components/Map/Icon/InfoBubble/InfoBubble.module.css","components/Map/Map.module.css","components/SideBar/Memorial/Memorial.module.css","utils/utils.js","components/Map/Icon/InfoBubble/InfoBubble.js","components/Map/Icon/Icon.js","components/Map/Map.js","components/SideBar/Memorial/Memorial.js","components/SideBar/Sidebar.js","containers/App.js","serviceWorker.js","index.js","components/Map/Icon/Icon.module.css","components/SideBar/Sidebar.module.css"],"names":["module","exports","getCoordinatesOfMemorial","memorial","latitude","longitude","Type","Attributes","forEach","attribute","Name","toLowerCase","Value","lat","lng","infoBubble","props","bubbleStyle","hideBubble","push","styles","hidden","popUp","className","join","type","closeButton","onClick","closeBubbleClick","popUpText","memorialName","map","attributesClass","key","Id","directionsButton","onDirectionsClick","icon","assignedStyles","hideIcon","IconImage","src","alt","onIconClick","InfoBubble","url","window","open","focus","Map","MapCenterContext","Consumer","mapCenter","bootstrapURLKeys","center","defaultZoom","Memorials","coordinates","Icon","typeName","bubbleCloseClick","React","Component","hide","Memorial","onSidebarClick","memorialInfo","Sidebar","state","lastClickedCoordinates","memorialId","setState","onChange","event","searchHandler","target","value","SearchInput","placeholder","Provider","this","ScrollMenu","createContext","App","ValueType","Required","error","isLoading","searchText","memorials","includes","trim","id","bubbleCloseClickHandler","getUserLocation","navigator","geolocation","getCurrentPosition","pos","coords","alert","updateMapCenter","axios","get","then","result","console","log","data","loadingMessage","currentLocation","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,eAAiB,4BAA4B,MAAQ,qB,kBCA9FD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,MAAQ,0BAA0B,OAAS,2BAA2B,KAAO,yBAAyB,gBAAkB,oCAAoC,UAAY,8BAA8B,YAAc,gCAAgC,iBAAmB,qCAAqC,aAAe,mC,mBCAjXD,EAAOC,QAAU,CAAC,IAAM,mB,2ECAxBD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,OAAS,yBAAyB,KAAO,uBAAuB,aAAe,iC,0JCD1HC,EAA2B,SAACC,GACvC,IAAIC,EAAW,KACXC,EAAY,KAShB,OARAF,EAASG,KAAKC,WAAWC,SAAQ,SAACC,GACK,aAAjCA,EAAUC,KAAKC,gBACjBP,EAAWK,EAAUG,OAEc,cAAjCH,EAAUC,KAAKC,gBACjBN,EAAYI,EAAUG,UAGnB,CAAEC,IAAKT,EAAUU,IAAKT,I,gCC2BhBU,EAnCI,SAACC,GAClB,IAAMC,EAAc,GAQpB,OANID,EAAME,WACRD,EAAYE,KAAKC,IAAOC,QAExBJ,EAAYE,KAAKC,IAAOE,OAIxB,yBAAKC,UAAWN,EAAYO,KAAK,KAC/B,yBAAKD,UAAWH,IAAOK,MACpBT,EAAMS,KACP,4BAAQF,UAAWH,IAAOM,YAAaC,QAASX,EAAMY,kBAAtD,MAIF,yBAAKL,UAAWH,IAAOS,WACrB,yBAAKN,UAAWH,IAAOU,cAAed,EAAMN,MAC3CM,EAAMV,KAAKC,WAAWwB,KAAI,SAACtB,GAAD,OACzB,yBAAKc,UAAWH,IAAOY,gBAAiBC,IAAKxB,EAAUyB,IACpDzB,EAAUC,KADb,KACqBD,EAAUG,UAGjC,4BACEW,UAAWH,IAAOe,iBAClBR,QAASX,EAAMoB,mBAFjB,mBCcOC,EA/BF,SAACrB,GACZ,IAAMsB,EAAiB,GAEnBtB,EAAMuB,SACRD,EAAenB,KAAKC,IAAOC,QAE3BiB,EAAenB,KAAKC,IAAOoB,WAK7B,OACE,yBAAKjB,UAAWH,IAAOiB,MACrB,yBACEd,UAAWe,EAAed,KAAK,KAC/BiB,IAAG,uBACHC,IAAI,gBACJf,QAASX,EAAM2B,cAEjB,kBAACC,EAAD,CACEtC,KAAMU,EAAMV,KACZI,KAAMM,EAAMN,KACZkB,iBAAkBZ,EAAMY,iBACxBV,WAAYF,EAAME,WAClBkB,kBAAmB,kBA9BD,SAACvB,EAAKC,GAC9B,IAAM+B,EAAG,qEAAiEhC,EAAjE,YAAwEC,EAAxE,uBACGgC,OAAOC,KAAKF,EAAK,UACzBG,MAAMF,QA2BqBV,CAAkBpB,EAAMH,IAAKG,EAAMF,MAC5DW,KAAMT,EAAMS,S,iBCSLwB,E,uKAnCH,IAAD,OACP,OACE,yBAAK1B,UAAWH,IAAO6B,KACrB,kBAACC,EAAiBC,SAAlB,MACG,SAACC,GAAD,OACC,kBAAC,IAAD,CACEC,iBAAkB,CAAEpB,IAAK,IACzBqB,OAAQF,EACRG,YAAa,IAEZ,EAAKvC,MAAMwC,UAAUzB,KAAI,SAAC5B,GACzB,IAAMsD,EAAcvD,EAAyBC,GAC7C,OACE,kBAACuD,EAAD,CACEzB,IAAK9B,EAAS+B,GACdrB,IAAK4C,EAAY5C,IACjBC,IAAK2C,EAAY3C,IACjB6C,SAAUxD,EAASG,KAAKI,KACxBJ,KAAMH,EAASG,KACfI,KAAMP,EAASO,KACf6B,SAAUpC,EAASoC,SACnBrB,WAAYf,EAASe,WACrByB,YAAa,kBAAM,EAAK3B,MAAM2B,YAAYxC,EAAS+B,KACnDN,iBAAkB,kBAAM,EAAKZ,MAAM4C,kC,GAxBrCC,IAAMC,W,gBCoBT3D,EAzBE,SAACa,GAChB,IAAMsB,EAAiB,GAOvB,OANItB,EAAM+C,KACRzB,EAAenB,KAAKC,IAAOC,QAE3BiB,EAAenB,KAAKC,IAAO4C,UAI3B,yBACEzC,UAAWe,EAAed,KAAK,KAC/BG,QAAS,kBAAMX,EAAMiD,eAAejD,EAAMkB,MAE1C,yBACEX,UAAWH,IAAOiB,KAClBI,IAAG,uBACHC,IAAI,uBAEN,yBAAKnB,UAAWH,IAAO8C,cACrB,6BAAMlD,EAAMN,S,gBCoCLyD,E,4MAlDbC,MAAQ,CACNC,uBAAwB,CACtBxD,IAAK,EACLC,IAAK,I,EAITmD,eAAiB,SAACK,GAChB,IAAIb,EAAc,CAAE5C,IAAK,EAAGC,IAAK,GACjC,EAAKE,MAAMwC,UAAUhD,SAAQ,SAACL,GACxBA,EAAS+B,KAAOoC,IAClBb,EAAcvD,EAAyBC,GACvC,EAAKoE,SAAS,CACZF,uBAAwBZ,QAI9B,EAAKzC,MAAMiD,eAAeR,I,uDAGlB,IAAD,OACP,OACE,yBAAKlC,UAAWH,IAAO+C,SACrB,2BACEK,SAAU,SAACC,GAAD,OAAW,EAAKzD,MAAM0D,cAAcD,EAAME,OAAOC,QAC3DrD,UAAWH,IAAOyD,YAClBpD,KAAK,OACLqD,YAAY,8BAEd,kBAAC5B,EAAiB6B,SAAlB,CAA2BH,MAAOI,KAAKZ,MAAMC,wBAC3C,yBAAK9C,UAAWH,IAAO6D,YACpBD,KAAKhE,MAAMwC,UAAUzB,KAAI,SAAC5B,GACzB,OACE,kBAAC6D,EAAD,CACE/B,IAAK9B,EAAS+B,GACdA,GAAI/B,EAAS+B,GACbxB,KAAMP,EAASO,KACfJ,KAAMH,EAASG,KACfyD,KAAM5D,EAASoC,SACf0B,eAAgB,EAAKA,2B,GAxCjBJ,IAAMC,W,iBCAfZ,EAAmBW,IAAMqB,gBAiIvBC,E,4MA9Hbf,MAAQ,CACNZ,UAAW,CACT,CACEtB,GAAI,GACJ5B,KAAM,CACJ4B,GAAI,GACJxB,KAAM,GACNH,WAAY,CACV,CACE2B,GAAI,GACJxB,KAAM,GACN0E,UAAW,GACXC,SAAU,KACVzE,MAAO,QAMjB0E,MAAO,KACPC,WAAW,EACXnC,UAAW,CAAEvC,IAAK,EAAGC,IAAK,I,EA0B5B4D,cAAgB,SAACc,GACf,IAAMC,EAAS,YAAO,EAAKrB,MAAMZ,WACjCiC,EAAUjF,SAAQ,SAACL,GACjB,IAAIoC,GAAW,EAEbpC,EAASO,KAAKC,cAAc+E,SAASF,EAAWG,OAAOhF,iBAEvD4B,GAAW,GAEbpC,EAASoC,SAAWA,EAChBpC,EAASoC,WACXpC,EAASe,YAAa,MAG1B,EAAKqD,SAAS,CAAEf,UAAWiC,K,EAG7B9C,YAAc,SAACiD,GACb,IAAMH,EAAS,YAAO,EAAKrB,MAAMZ,WACjCiC,EAAUjF,SAAQ,SAACL,GACjBA,EAASe,YAAa,EAClBf,EAAS+B,KAAO0D,IAClBzF,EAASe,YAAa,MAG1B,EAAKqD,SAAS,CAAEf,UAAWiC,K,EAG7BI,wBAA0B,WACxB,IAAMJ,EAAS,YAAO,EAAKrB,MAAMZ,WACjCiC,EAAU1D,KAAI,SAAC5B,GACbA,EAASe,YAAa,KAExB,EAAKqD,SAAS,CAAEf,UAAWiC,K,EAG7BK,gBAAkB,WAChBC,UAAUC,YAAYC,oBAAmB,SAACC,GACpCA,EACF,EAAK3B,SAAS,CACZnB,UAAW,CACTvC,IAAKqF,EAAIC,OAAO/F,SAChBU,IAAKoF,EAAIC,OAAO9F,aAIpB+F,MAAM,mC,EAKZC,gBAAkB,SAAC5C,GAAD,OAAiB,EAAKc,SAAS,CAAEnB,UAAWK,K,kEA1EzC,IAAD,OAClB6C,IAAMC,IAAI,2DAA2DC,MACnE,SAACC,GACCC,QAAQC,IAAI,OAAQF,EAAOG,MAC3B,EAAKrC,SAAS,CACZf,UAAWiD,EAAOG,KAAK7E,KAAI,SAAC5B,GAG1B,OAFAA,EAASoC,UAAW,EACpBpC,EAASe,YAAa,EACff,KAEToF,WAAW,EACXnC,UAAW,EAAK0C,uBAGpB,SAACR,GACC,EAAKf,SAAS,CACZgB,WAAW,EACXD,MAAOA,S,+BAiFb,OArBgBN,KAAKZ,MAAMkB,MACzB,yBAAK/D,UAAWH,IAAOkE,OAAvB,uCACGN,KAAKZ,MAAMmB,UAiBd,wBAAIhE,UAAWH,IAAOyF,gBAAtB,cAhBA,yBAAKtF,UAAWH,IAAO+D,KACrB,kBAACjC,EAAiB6B,SAAlB,CAA2BH,MAAOI,KAAKZ,MAAMhB,WAC3C,kBAAC,EAAD,CACEI,UAAWwB,KAAKZ,MAAMZ,UACtBsD,gBAAiB9B,KAAKZ,MAAM0C,gBAC5BnE,YAAaqC,KAAKrC,YAClBiB,iBAAkBoB,KAAKa,0BAEzB,kBAAC,EAAD,CACErC,UAAWwB,KAAKZ,MAAMZ,UACtBkB,cAAeM,KAAKN,cACpBT,eAAgBe,KAAKqB,wB,GApHfxC,IAAMC,WCGJiD,QACW,cAA7BjE,OAAOkE,SAASC,UAEe,UAA7BnE,OAAOkE,SAASC,UAEhBnE,OAAOkE,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBvB,WACrBA,UAAUwB,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLoB,QAAQpB,MAAMA,EAAMsC,a,kBExI5B5H,EAAOC,QAAU,CAAC,UAAY,wBAAwB,OAAS,uB,kBCA/DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,WAAa,+B","file":"static/js/main.27a6e1b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__coccW\",\"loadingMessage\":\"App_loadingMessage__1cTxE\",\"error\":\"App_error__3T6-o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"InfoBubble_hidden__WLbN2\",\"popUp\":\"InfoBubble_popUp__2jlbZ\",\"fadein\":\"InfoBubble_fadein__3p9na\",\"type\":\"InfoBubble_type__21CwN\",\"attributesClass\":\"InfoBubble_attributesClass__30prR\",\"popUpText\":\"InfoBubble_popUpText__3TsLD\",\"closeButton\":\"InfoBubble_closeButton__2onXx\",\"directionsButton\":\"InfoBubble_directionsButton__1qffu\",\"memorialName\":\"InfoBubble_memorialName__kSJ2R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Map\":\"Map_Map__1z8ch\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Memorial\":\"Memorial_Memorial__GlNz6\",\"hidden\":\"Memorial_hidden__37orZ\",\"icon\":\"Memorial_icon__1ZYCh\",\"memorialInfo\":\"Memorial_memorialInfo__2XpZa\"};","export const getCoordinatesOfMemorial = (memorial) => {\r\n  let latitude = null;\r\n  let longitude = null;\r\n  memorial.Type.Attributes.forEach((attribute) => {\r\n    if (attribute.Name.toLowerCase() === \"latitude\") {\r\n      latitude = attribute.Value;\r\n    }\r\n    if (attribute.Name.toLowerCase() === \"longitude\") {\r\n      longitude = attribute.Value;\r\n    }\r\n  });\r\n  return { lat: latitude, lng: longitude };\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./InfoBubble.module.css\";\r\n\r\nconst infoBubble = (props) => {\r\n  const bubbleStyle = [];\r\n\r\n  if (props.hideBubble) {\r\n    bubbleStyle.push(styles.hidden);\r\n  } else {\r\n    bubbleStyle.push(styles.popUp);\r\n  }\r\n\r\n  return (\r\n    <div className={bubbleStyle.join(\"\")}>\r\n      <div className={styles.type}>\r\n        {props.type}\r\n        <button className={styles.closeButton} onClick={props.closeBubbleClick}>\r\n          x\r\n        </button>\r\n      </div>\r\n      <div className={styles.popUpText}>\r\n        <div className={styles.memorialName}>{props.Name}</div>\r\n        {props.Type.Attributes.map((attribute) => (\r\n          <div className={styles.attributesClass} key={attribute.Id}>\r\n            {attribute.Name}: {attribute.Value}\r\n          </div>\r\n        ))}\r\n        <button\r\n          className={styles.directionsButton}\r\n          onClick={props.onDirectionsClick}\r\n        >\r\n          Take me here\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default infoBubble;\r\n","import React from \"react\";\r\nimport styles from \"./Icon.module.css\";\r\nimport InfoBubble from \"./InfoBubble/InfoBubble\";\r\n\r\nconst onDirectionsClick = (lat, lng) => {\r\n  const url = `https://www.google.com/maps/dir/?api=1&origin=&destination=${lat},${lng}&travelmode=driving`;\r\n  const win = window.open(url, \"_blank\");\r\n  win.focus(window);\r\n};\r\n\r\nconst icon = (props) => {\r\n  const assignedStyles = [];\r\n\r\n  if (props.hideIcon) {\r\n    assignedStyles.push(styles.hidden);\r\n  } else {\r\n    assignedStyles.push(styles.IconImage);\r\n  }\r\n\r\n  const type = \"Memorial\";\r\n\r\n  return (\r\n    <div className={styles.icon}>\r\n      <img\r\n        className={assignedStyles.join(\" \")}\r\n        src={`./icons/memorial.png`}\r\n        alt=\"memorial icon\"\r\n        onClick={props.onIconClick}\r\n      />\r\n      <InfoBubble\r\n        Type={props.Type}\r\n        Name={props.Name}\r\n        closeBubbleClick={props.closeBubbleClick}\r\n        hideBubble={props.hideBubble}\r\n        onDirectionsClick={() => onDirectionsClick(props.lat, props.lng)}\r\n        type={props.type}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default icon;\r\n","import React from \"react\";\r\nimport GoogleMap from \"google-map-react\";\r\n\r\nimport { MapCenterContext } from \"../../containers/App\";\r\nimport { getCoordinatesOfMemorial } from \"../../utils/utils\";\r\nimport Icon from \"./Icon/Icon\";\r\nimport styles from \"./Map.module.css\";\r\n\r\nclass Map extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={styles.Map}>\r\n        <MapCenterContext.Consumer>\r\n          {(mapCenter) => (\r\n            <GoogleMap\r\n              bootstrapURLKeys={{ key: \"\" }}\r\n              center={mapCenter}\r\n              defaultZoom={14}\r\n            >\r\n              {this.props.Memorials.map((memorial) => {\r\n                const coordinates = getCoordinatesOfMemorial(memorial);\r\n                return (\r\n                  <Icon\r\n                    key={memorial.Id}\r\n                    lat={coordinates.lat}\r\n                    lng={coordinates.lng}\r\n                    typeName={memorial.Type.Name}\r\n                    Type={memorial.Type}\r\n                    Name={memorial.Name}\r\n                    hideIcon={memorial.hideIcon}\r\n                    hideBubble={memorial.hideBubble}\r\n                    onIconClick={() => this.props.onIconClick(memorial.Id)}\r\n                    closeBubbleClick={() => this.props.bubbleCloseClick()}\r\n                  />\r\n                );\r\n              })}\r\n            </GoogleMap>\r\n          )}\r\n        </MapCenterContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport styles from \"./Memorial.module.css\";\r\n\r\nconst memorial = (props) => {\r\n  const assignedStyles = [];\r\n  if (props.hide) {\r\n    assignedStyles.push(styles.hidden);\r\n  } else {\r\n    assignedStyles.push(styles.Memorial);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={assignedStyles.join(\" \")}\r\n      onClick={() => props.onSidebarClick(props.Id)}\r\n    >\r\n      <img\r\n        className={styles.icon}\r\n        src={`./icons/memorial.png`}\r\n        alt=\"memorial type icon\"\r\n      />\r\n      <div className={styles.memorialInfo}>\r\n        <div>{props.Name}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memorial;\r\n","import React from \"react\";\r\n\r\nimport { MapCenterContext } from \"../../containers/App\";\r\nimport Memorial from \"./Memorial/Memorial\";\r\nimport styles from \"./Sidebar.module.css\";\r\nimport { getCoordinatesOfMemorial } from \"../../utils/utils\";\r\n\r\nclass Sidebar extends React.Component {\r\n  state = {\r\n    lastClickedCoordinates: {\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  };\r\n\r\n  onSidebarClick = (memorialId) => {\r\n    let coordinates = { lat: 0, lng: 0 };\r\n    this.props.Memorials.forEach((memorial) => {\r\n      if (memorial.Id === memorialId) {\r\n        coordinates = getCoordinatesOfMemorial(memorial);\r\n        this.setState({\r\n          lastClickedCoordinates: coordinates,\r\n        });\r\n      }\r\n    });\r\n    this.props.onSidebarClick(coordinates);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.Sidebar}>\r\n        <input\r\n          onChange={(event) => this.props.searchHandler(event.target.value)}\r\n          className={styles.SearchInput}\r\n          type=\"text\"\r\n          placeholder=\"What are you looking for?\"\r\n        />\r\n        <MapCenterContext.Provider value={this.state.lastClickedCoordinates}>\r\n          <div className={styles.ScrollMenu}>\r\n            {this.props.Memorials.map((memorial) => {\r\n              return (\r\n                <Memorial\r\n                  key={memorial.Id}\r\n                  Id={memorial.Id}\r\n                  Name={memorial.Name}\r\n                  Type={memorial.Type}\r\n                  hide={memorial.hideIcon}\r\n                  onSidebarClick={this.onSidebarClick}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </MapCenterContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Map from \"../components/Map/Map\";\r\nimport Sidebar from \"../components/SideBar/Sidebar\";\r\nimport styles from \"./App.module.css\";\r\n\r\nexport const MapCenterContext = React.createContext();\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    Memorials: [\r\n      {\r\n        Id: \"\",\r\n        Type: {\r\n          Id: \"\",\r\n          Name: \"\",\r\n          Attributes: [\r\n            {\r\n              Id: \"\",\r\n              Name: \"\",\r\n              ValueType: \"\",\r\n              Required: null,\r\n              Value: \"\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n    error: null,\r\n    isLoading: true,\r\n    mapCenter: { lat: 0, lng: 0 },\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"http://localhost:1337/memorials/types/attributes/values\").then(\r\n      (result) => {\r\n        console.log(\"DATA\", result.data);\r\n        this.setState({\r\n          Memorials: result.data.map((memorial) => {\r\n            memorial.hideIcon = false;\r\n            memorial.hideBubble = true;\r\n            return memorial;\r\n          }),\r\n          isLoading: false,\r\n          mapCenter: this.getUserLocation(),\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          error: error,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  searchHandler = (searchText) => {\r\n    const memorials = [...this.state.Memorials];\r\n    memorials.forEach((memorial) => {\r\n      let hideIcon = true;\r\n      if (\r\n        memorial.Name.toLowerCase().includes(searchText.trim().toLowerCase())\r\n      ) {\r\n        hideIcon = false;\r\n      }\r\n      memorial.hideIcon = hideIcon;\r\n      if (memorial.hideIcon) {\r\n        memorial.hideBubble = true;\r\n      }\r\n    });\r\n    this.setState({ Memorials: memorials });\r\n  };\r\n\r\n  onIconClick = (id) => {\r\n    const memorials = [...this.state.Memorials];\r\n    memorials.forEach((memorial) => {\r\n      memorial.hideBubble = true;\r\n      if (memorial.Id === id) {\r\n        memorial.hideBubble = false;\r\n      }\r\n    });\r\n    this.setState({ Memorials: memorials });\r\n  };\r\n\r\n  bubbleCloseClickHandler = () => {\r\n    const memorials = [...this.state.Memorials];\r\n    memorials.map((memorial) => {\r\n      memorial.hideBubble = true;\r\n    });\r\n    this.setState({ Memorials: memorials });\r\n  };\r\n\r\n  getUserLocation = () => {\r\n    navigator.geolocation.getCurrentPosition((pos) => {\r\n      if (pos) {\r\n        this.setState({\r\n          mapCenter: {\r\n            lat: pos.coords.latitude,\r\n            lng: pos.coords.longitude,\r\n          },\r\n        });\r\n      } else {\r\n        alert(\"Unable to get geolocation..\");\r\n      }\r\n    });\r\n  };\r\n\r\n  updateMapCenter = (coordinates) => this.setState({ mapCenter: coordinates });\r\n\r\n  render() {\r\n    const content = this.state.error ? (\r\n      <div className={styles.error}>Oops, something's not right here...</div>\r\n    ) : !this.state.isLoading ? (\r\n      <div className={styles.App}>\r\n        <MapCenterContext.Provider value={this.state.mapCenter}>\r\n          <Map\r\n            Memorials={this.state.Memorials}\r\n            currentLocation={this.state.currentLocation}\r\n            onIconClick={this.onIconClick}\r\n            bubbleCloseClick={this.bubbleCloseClickHandler}\r\n          />\r\n          <Sidebar\r\n            Memorials={this.state.Memorials}\r\n            searchHandler={this.searchHandler}\r\n            onSidebarClick={this.updateMapCenter}\r\n          />\r\n        </MapCenterContext.Provider>\r\n      </div>\r\n    ) : (\r\n      <h1 className={styles.loadingMessage}>Loading...</h1>\r\n    );\r\n    return content;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IconImage\":\"Icon_IconImage__mbUDs\",\"hidden\":\"Icon_hidden__kglWb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"Sidebar_Sidebar__2p9Yo\",\"SearchInput\":\"Sidebar_SearchInput__2kJ0u\",\"ScrollMenu\":\"Sidebar_ScrollMenu__3qoGw\"};"],"sourceRoot":""}